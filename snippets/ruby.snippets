########################################
# Ruby snippets - for Rails, see below #
########################################

# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby
	# encoding: utf-8

snippet $req require
	require '${1}'

snippet $reqs require 'spec_helper'
	require 'spec_helper'

snippet $case
	case ${1:object}
	when ${2:condition}
		${3}
	end

snippet $when
	when ${1:condition}
		${2}

snippet $def
	def ${1:method_name}
		${2}
	end

snippet $if
	if ${1:condition}
		${2}
	end

snippet $ife
	if ${1:condition}
		${2}
	else
		${3}
	end

snippet $elsif
	elsif ${1:condition}
		${2}

snippet $unless
	unless ${1:condition}
		${2}
	end

snippet $mod module .. end
	module ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end

snippet $cla class .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${2}
	end

snippet $cla class .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(${2:args})
			${3}
		end
	end

snippet $cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end
	end

# attr_reader
snippet $attr attr_reader
	attr_reader :${1:attr_names}

# attr_writer
snippet $attr attr_writer
	attr_writer :${1:attr_names}

# attr_accessor
snippet $attr attr_accessor
	attr_accessor :${1:attr_names}

snippet $attr attr_accessible
	attr_accessible :${1:attr_names}

snippet $defs
	def self.${1:class_method_name}
		${2}
	end

snippet $eachdo
	each do |${1:e}|
		${2}
	end

snippet $mapdo
	map do |${1:e}|
		${2}
	end

# rspec
snippet $des
	describe ${1:ClassName} do
	${2}
	end
snippet $desc
	describe '${1:desc_name}' do
		${2}
	end

snippet $sub
	subject { ${1:var} }

snippet $bef
	before { ${1} }

snippet $befd
	before do
		${1}
	end

snippet $con
	context '${1:desc}' do
		${2}
	end

snippet $let
	let(:${1:name}) { ${2} }

snippet $it
	it { should ${1:operator} ${2:expected} }

snippet $ittrue
	it { should be_true }

snippet $itfalse
	it { should be_false }

snippet $itnil
	it { should be_nil }

snippet $it2
	it 'should ${1:desc}' do
		${2}
	end

snippet $itr
	it { should respond_to(${1:attr}) }

snippet $itvp
	it { should validate_presence_of(${1:attr}) }

snippet $itvn
	it { should validate_numericality_of(${1:attr}).to_allow(${2}) }

snippet $item
	it { should embed_many(${1:attr}) }

snippet $its
	its(:${1:attr}) { should ${2:operator} ${3:expected} }

# Fabricator

snippet $Fab
	Fabricator(:${1:name}, class_name: '${2:ClassName}') do
		${3:attr1} ${4:val1}
		${5:attr2} ${6:val2}
	end

snippet $Fc
	Fabricate(:${1:name})

snippet $Fb
	Fabricate.build(:${1:name})

snippet $seq
	{ sequence(:${1:name}) { |i| ${2} } }

# debugging
snippet $pry
	binding.pry

snippet $itpry
	it 'should test' do
		binding.pry
	end
